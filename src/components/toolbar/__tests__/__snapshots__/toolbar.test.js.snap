// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Toolbar Component should handle updating state and clearing all filters: dispatch filter 1`] = `undefined`;

exports[`Toolbar Component should handle updating state and clearing all filters: sla, selected once 1`] = `
Object {
  "state": null,
}
`;

exports[`Toolbar Component should handle updating state and clearing all filters: sla, selected twice 1`] = `
Object {
  "state": null,
}
`;

exports[`Toolbar Component should handle updating state and clearing all filters: usage, selected once 1`] = `
Object {
  "state": null,
}
`;

exports[`Toolbar Component should handle updating state and clearing all filters: usage, selected twice 1`] = `
Object {
  "state": null,
}
`;

exports[`Toolbar Component should handle updating state and clearing specific filters: sla, clear specific filter 1`] = `null`;

exports[`Toolbar Component should handle updating state and clearing specific filters: sla, select specific 1`] = `null`;

exports[`Toolbar Component should handle updating state and clearing specific filters: usage, clear specific filter 1`] = `null`;

exports[`Toolbar Component should handle updating state and clearing specific filters: usage, select specific 1`] = `null`;

exports[`Toolbar Component should render a non-connected component: non-connected 1`] = `
<Toolbar
  className="curiosity-toolbar pf-m-toggle-group-container ins-c-primary-toolbar"
  clearAllFilters={[Function]}
  collapseListedFiltersBreakpoint="sm"
  id="curiosity-toolbar"
>
  <ToolbarContent
    isExpanded={false}
    showClearFiltersButton={false}
  >
    <ToolbarToggleGroup
      breakpoint="md"
      toggleIcon={
        <FilterIcon
          color="currentColor"
          noVerticalAlign={false}
          size="sm"
        />
      }
    >
      <ForwardRef
        variant="filter-group"
      >
        <ToolbarItem>
          <Select
            aria-label="t(curiosity-toolbar.category)"
            ariaLabel="Select option"
            className=""
            id="generatedid-"
            isDisabled={false}
            isToggleText={true}
            name={null}
            onSelect={[Function]}
            options={
              Array [
                Object {
                  "title": "t(curiosity-toolbar.slaCategory)",
                  "value": "sla",
                },
                Object {
                  "title": "t(curiosity-toolbar.usageCategory)",
                  "value": "usage",
                },
              ]
            }
            placeholder="t(curiosity-toolbar.categoryPlaceholder)"
            selectedOptions={Array []}
            toggleIcon={
              <FilterIcon
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              />
            }
            variant="single"
          />
        </ToolbarItem>
        <ToolbarFilter
          categoryName="t(curiosity-toolbar.slaCategory)"
          chips={Array []}
          deleteChip={[Function]}
          showToolbarItem={false}
        >
          <Select
            aria-label="t(curiosity-toolbar.slaCategory)"
            ariaLabel="Select option"
            className=""
            id="generatedid-"
            isDisabled={false}
            isToggleText={true}
            name={null}
            onSelect={[Function]}
            options={
              Array [
                Object {
                  "title": "t(curiosity-toolbar.slaPremium)",
                  "value": "premium",
                },
                Object {
                  "title": "t(curiosity-toolbar.slaStandard)",
                  "value": "standard",
                },
                Object {
                  "title": "t(curiosity-toolbar.slaSelfSupport)",
                  "value": "self-support",
                },
                Object {
                  "title": "t(curiosity-toolbar.slaNone)",
                  "value": "",
                },
              ]
            }
            placeholder="t(curiosity-toolbar.slaPlaceholder)"
            selectedOptions={Array []}
            toggleIcon={null}
            variant="single"
          />
        </ToolbarFilter>
        <ToolbarFilter
          categoryName="t(curiosity-toolbar.usageCategory)"
          chips={Array []}
          deleteChip={[Function]}
          showToolbarItem={false}
        >
          <Select
            aria-label="t(curiosity-toolbar.usageCategory)"
            ariaLabel="Select option"
            className=""
            id="generatedid-"
            isDisabled={false}
            isToggleText={true}
            name={null}
            onSelect={[Function]}
            options={
              Array [
                Object {
                  "title": "t(curiosity-toolbar.usageDevelopment)",
                  "value": "Development/Test",
                },
                Object {
                  "title": "t(curiosity-toolbar.usageDisaster)",
                  "value": "Disaster Recovery",
                },
                Object {
                  "title": "t(curiosity-toolbar.usageProduction)",
                  "value": "Production",
                },
                Object {
                  "title": "t(curiosity-toolbar.usageUnspecified)",
                  "value": "",
                },
              ]
            }
            placeholder="t(curiosity-toolbar.usagePlaceholder)"
            selectedOptions={Array []}
            toggleIcon={null}
            variant="single"
          />
        </ToolbarFilter>
      </ForwardRef>
    </ToolbarToggleGroup>
  </ToolbarContent>
</Toolbar>
`;

exports[`Toolbar Component should return an empty render when disabled: disabled component 1`] = `""`;
