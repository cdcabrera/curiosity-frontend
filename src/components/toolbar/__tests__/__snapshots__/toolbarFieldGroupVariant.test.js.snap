// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ToolbarFieldGroupVariant Component should generate select options: toolbarFieldOptions 1`] = `
[
  {
    "selected": false,
    "title": "t(curiosity-toolbar.label_groupVariant, {"context":"dolor"})",
    "value": "dolor",
  },
  {
    "selected": false,
    "title": "t(curiosity-toolbar.label_groupVariant, {"context":"ipsum"})",
    "value": "ipsum",
  },
  {
    "selected": false,
    "title": "t(curiosity-toolbar.label_groupVariant, {"context":"lorem"})",
    "value": "lorem",
  },
  {
    "selected": false,
    "title": "t(curiosity-toolbar.label_groupVariant, {"context":"sit"})",
    "value": "sit",
  },
  {
    "selected": false,
    "title": "t(curiosity-toolbar.label, {"context":"groupVariant"})",
    "value": "",
  },
]
`;

exports[`ToolbarFieldGroupVariant Component should handle updating through redux state with component: dispatch, component 1`] = `
[
  [
    [
      {
        "__dynamic": true,
        "__originalType": "SET_QUERY_INVENTORY_INSTANCES-undefined",
        "__resetHard": true,
        "dynamicType": "SET_QUERY_INVENTORY_INSTANCES-undefined",
        "type": "SET_QUERY_INVENTORY_INSTANCES-undefined",
      },
      {
        "__dynamic": true,
        "__originalType": "SET_QUERY_INVENTORY_GUESTS-undefined",
        "__resetHard": true,
        "dynamicType": "SET_QUERY_INVENTORY_GUESTS-undefined",
        "type": "SET_QUERY_INVENTORY_GUESTS-undefined",
      },
      {
        "__dynamic": true,
        "__originalType": "SET_QUERY_INVENTORY_SUBSCRIPTIONS-undefined",
        "__resetHard": true,
        "dynamicType": "SET_QUERY_INVENTORY_SUBSCRIPTIONS-undefined",
        "type": "SET_QUERY_INVENTORY_SUBSCRIPTIONS-undefined",
      },
      {
        "__dynamic": true,
        "__originalType": "SET_QUERY_GRAPH-undefined",
        "__resetHard": true,
        "dynamicType": "SET_QUERY_GRAPH-undefined",
        "type": "SET_QUERY_GRAPH-undefined",
      },
      {
        "__dynamic": true,
        "__originalType": "SET_QUERY-undefined",
        "__resetHard": true,
        "dynamicType": "SET_QUERY-undefined",
        "type": "SET_QUERY-undefined",
      },
      {
        "__dynamic": true,
        "__originalType": "SET_PRODUCT_VARIANT",
        "dynamicType": "SET_PRODUCT_VARIANT",
        "type": "SET_PRODUCT_VARIANT",
        "undefined": "ipsum",
      },
    ],
  ],
]
`;

exports[`ToolbarFieldGroupVariant Component should handle updating through redux state with hook: dispatch, hook 1`] = `
[
  [
    [
      {
        "__dynamic": true,
        "__originalType": "SET_QUERY_INVENTORY_INSTANCES-undefined",
        "__resetHard": true,
        "dynamicType": "SET_QUERY_INVENTORY_INSTANCES-undefined",
        "type": "SET_QUERY_INVENTORY_INSTANCES-undefined",
      },
      {
        "__dynamic": true,
        "__originalType": "SET_QUERY_INVENTORY_GUESTS-undefined",
        "__resetHard": true,
        "dynamicType": "SET_QUERY_INVENTORY_GUESTS-undefined",
        "type": "SET_QUERY_INVENTORY_GUESTS-undefined",
      },
      {
        "__dynamic": true,
        "__originalType": "SET_QUERY_INVENTORY_SUBSCRIPTIONS-undefined",
        "__resetHard": true,
        "dynamicType": "SET_QUERY_INVENTORY_SUBSCRIPTIONS-undefined",
        "type": "SET_QUERY_INVENTORY_SUBSCRIPTIONS-undefined",
      },
      {
        "__dynamic": true,
        "__originalType": "SET_QUERY_GRAPH-undefined",
        "__resetHard": true,
        "dynamicType": "SET_QUERY_GRAPH-undefined",
        "type": "SET_QUERY_GRAPH-undefined",
      },
      {
        "__dynamic": true,
        "__originalType": "SET_QUERY-undefined",
        "__resetHard": true,
        "dynamicType": "SET_QUERY-undefined",
        "type": "SET_QUERY-undefined",
      },
      {
        "__dynamic": true,
        "__originalType": "SET_PRODUCT_VARIANT",
        "dynamicType": "SET_PRODUCT_VARIANT",
        "loremIpsum": "dolor sit",
        "type": "SET_PRODUCT_VARIANT",
      },
    ],
  ],
]
`;

exports[`ToolbarFieldGroupVariant Component should render a basic component: basic 1`] = `
<ToolbarContent
  className="curiosity-toolbar__content"
  isExpanded={false}
  showClearFiltersButton={false}
>
  <ToolbarItem
    variant="label"
  >
    t(curiosity-toolbar.label, {"context":"groupVariant"})
     
  </ToolbarItem>
  <Select
    aria-label="t(curiosity-toolbar.placeholder, {"context":"groupVariant"})"
    ariaLabel="Select option"
    className=""
    data-test="toolbarFieldGroupVariant"
    direction="down"
    id="generatedid-"
    isDisabled={false}
    isDropdownButton={false}
    isFlipEnabled={false}
    isInline={true}
    isToggleText={true}
    maxHeight={310}
    name={null}
    onSelect={[Function]}
    onSplitButton={[Function]}
    options={
      [
        {
          "selected": undefined,
          "title": "lorem",
          "value": "lorem",
        },
        {
          "selected": undefined,
          "title": "ipsum",
          "value": "ipsum",
        },
        {
          "selected": undefined,
          "title": "dolor",
          "value": "dolor",
        },
        {
          "selected": undefined,
          "title": "sit",
          "value": "sit",
        },
      ]
    }
    placeholder="t(curiosity-toolbar.placeholder, {"context":"groupVariant"})"
    position="left"
    selectedOptions={null}
    splitButtonVariant={null}
    toggleIcon={null}
    variant="single"
  />
</ToolbarContent>
`;

exports[`ToolbarFieldGroupVariant Component should return a standalone component with toolbar: standalone toolbar 1`] = `
<Toolbar
  className="curiosity-toolbar pf-m-toggle-group-container ins-c-primary-toolbar"
  collapseListedFiltersBreakpoint="sm"
  id="curiosity-toolbar"
>
  <ToolbarContent
    className="curiosity-toolbar__content"
    isExpanded={false}
    showClearFiltersButton={false}
  >
    <ToolbarItem
      variant="label"
    >
      t(curiosity-toolbar.label, {"context":"groupVariant"})
       
    </ToolbarItem>
    <Select
      aria-label="t(curiosity-toolbar.placeholder, {"context":"groupVariant"})"
      ariaLabel="Select option"
      className=""
      data-test="toolbarFieldGroupVariant"
      direction="down"
      id="generatedid-"
      isDisabled={false}
      isDropdownButton={false}
      isFlipEnabled={false}
      isInline={true}
      isToggleText={true}
      maxHeight={310}
      name={null}
      onSelect={[Function]}
      onSplitButton={[Function]}
      options={
        [
          {
            "selected": undefined,
            "title": "lorem",
            "value": "lorem",
          },
          {
            "selected": undefined,
            "title": "ipsum",
            "value": "ipsum",
          },
        ]
      }
      placeholder="t(curiosity-toolbar.placeholder, {"context":"groupVariant"})"
      position="left"
      selectedOptions={null}
      splitButtonVariant={null}
      toggleIcon={null}
      variant="single"
    />
  </ToolbarContent>
</Toolbar>
`;

exports[`ToolbarFieldGroupVariant Component should return null, undefined, or empty if there are one or less options: one or less 1`] = `null`;
