// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Service Helpers should attempt to apply a Joi schema to a response: schemaResponse, camelCasing 1`] = `
{
  "loremIpsum": "dolor_sit",
}
`;

exports[`Service Helpers should attempt to apply a Joi schema to a response: schemaResponse, parameters 1`] = `
[
  [
    {
      "lorem_ipsum": "dolor_sit",
    },
    {
      "convert": true,
    },
  ],
]
`;

exports[`Service Helpers should have specific functions: serviceHelpers 1`] = `
{
  "camelCase": [Function],
  "generateHash": [Function],
  "memo": [Function],
  "memoClone": [Function],
  "passDataToCallback": [Function],
  "pollingRetryLimit": [Function],
  "schemaResponse": [Function],
  "timeoutFunctionCancel": [Function],
}
`;

exports[`Service Helpers should support a polling retry limit calculation: retry limits 1`] = `
{
  "exact": 1,
  "intervalUndefined": 1,
  "limitGreaterThanInterval": 10,
  "limitLessThanInterval": 1,
  "limitUndefined": 1,
}
`;

exports[`Service Helpers should support a polling retry limit calculation: retry limits, zero 1`] = `
{
  "exact": 1,
  "intervalUndefined": 0,
  "limitGreaterThanInterval": 10,
  "limitLessThanInterval": 0,
  "limitUndefined": 0,
}
`;

exports[`Service Helpers should support applying data to a supplied callback: passDataToCallback, error 1`] = `
{
  "data": [
    {
      "dolor": "sit",
    },
  ],
  "error": [Error: hello world],
}
`;

exports[`Service Helpers should support applying data to a supplied callback: passDataToCallback, success 1`] = `
[
  [
    {
      "hello": "world",
    },
    "lorem ipsum",
  ],
]
`;

exports[`Service Helpers should support camel casing obj keys: camelCase 1`] = `
{
  "loremIpsum": [
    {
      "dolorSit": [
        {
          "helloWorld": 1,
        },
      ],
    },
  ],
}
`;

exports[`Service Helpers should support cancelling function calls: timeout error 1`] = `
{
  "error": "dolor sit error",
  "success": "lorem ipsum success",
}
`;
